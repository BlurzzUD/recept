class CorrectScraper {
    constructor() {
        this.proxies = [
            'https://corsproxy.io/?',
            'https://api.allorigins.win/raw?url=',
            'https://cors-anywhere.herokuapp.com/'
        ];
        this.fallbackData = this.getFallbackData();
    }

    getFallbackData() {
        return {
            'p√∂rk√∂lt': [
                {
                    title: 'Marhap√∂rk√∂lt klasszikus recept',
                    source: 'mindmegette.hu',
                    url: 'https://www.mindmegette.hu/marhaporkolt.recept/',
                    ingredients: [
                        '80 dkg marhal√°bsz√°r',
                        '2 fej v√∂r√∂shagyma',
                        '2 gerezd fokhagyma',
                        '2 ek liszt',
                        '2 ek olaj',
                        '1 tk pirospaprika',
                        's√≥, bors √≠zl√©s szerint',
                        '1 tk k√∂m√©ny',
                        '2 db z√∂ldpaprika'
                    ],
                    instructions: [
                        'A hagym√°t apr√≥ra v√°gjuk √©s az olajon √ºvegesre pir√≠tjuk.',
                        'Hozz√°adjuk a fokhagym√°t, majd a felkock√°zott h√∫st.',
                        'Megsz√≥rjuk pirospaprik√°val, majd fel√∂ntj√ºk v√≠zzel.',
                        'S√≥zzuk, borsozzuk, k√∂m√©nyt hozz√°adunk.',
                        'Puh√°ra f≈ëzz√ºk, majd a v√©g√©n a z√∂ldpaprik√°t is hozz√°adjuk.'
                    ]
                }
            ],
            'palacsinta': [
                {
                    title: 'Palacsinta alaprecept',
                    source: 'nosalty.hu',
                    url: 'https://www.nosalty.hu/recept/palacsinta-alaprecept',
                    ingredients: [
                        '25 dkg liszt',
                        '3 db toj√°s',
                        '3 dl tej',
                        '3 dl sz√≥dav√≠z',
                        '1 csomag van√≠li√°s cukor',
                        '1 csipet s√≥',
                        '2 ek olaj a s√ºt√©shez'
                    ],
                    instructions: [
                        'A lisztet egy t√°lba szit√°ljuk, hozz√°adjuk a toj√°sokat.',
                        'Folyamatos kever√©s mellett h√≠g√≠t√°s a tejjel √©s sz√≥dav√≠zzel.',
                        'Hozz√°adjuk a van√≠li√°s cukrot √©s a csipet s√≥t.',
                        'A t√©szt√°t legal√°bb 30 percig pihentetj√ºk.',
                        'Forr√≥ serpeny≈ëben v√©konyan kis√ºtj√ºk mindk√©t oldal√°t.'
                    ]
                },
                {
                    title: 'V√©kony palacsinta',
                    source: 'mindmegette.hu',
                    url: 'https://www.mindmegette.hu/vekonypalacsinta.recept/',
                    ingredients: [
                        '20 dkg finomliszt',
                        '2 db toj√°s',
                        '4 dl tej',
                        '2 dl sz√©nsavmentes √°sv√°nyv√≠z',
                        '1 ek olaj',
                        '1 csipet s√≥'
                    ],
                    instructions: [
                        'A lisztet a toj√°sokkal elkeverj√ºk.',
                        'Fokozatosan hozz√°adjuk a tejet √©s √°sv√°nyvizet.',
                        'Az olajat √©s s√≥t hozz√°adjuk, sim√°ra keverj√ºk.',
                        'A t√©szt√°t 15 percig pihentetj√ºk.',
                        'Forr√≥ palacsintas√ºt≈ëben kis√ºtj√ºk.'
                    ]
                }
            ],
            'guly√°s': [
                {
                    title: 'Guly√°sleves eredeti recept',
                    source: 'mindmegette.hu',
                    url: 'https://www.mindmegette.hu/gulyasleves.recept/',
                    ingredients: [
                        '60 dkg marhal√°bsz√°r',
                        '2 fej v√∂r√∂shagyma',
                        '2 gerezd fokhagyma',
                        '2 db s√°rgar√©pa',
                        '1 db petrezselyemgy√∂k√©r',
                        '2 db zeller',
                        '3 db burgonya',
                        '2 ek olaj',
                        '1 ek pirospaprika',
                        '1 tk k√∂m√©ny',
                        's√≥, bors √≠zl√©s szerint'
                    ],
                    instructions: [
                        'A hagym√°t apr√≥ra v√°gjuk, az olajon megpir√≠tjuk.',
                        'Hozz√°adjuk a felkock√°zott h√∫st √©s pirospaprik√°t.',
                        'Fel√∂ntj√ºk v√≠zzel, hozz√°adjuk a k√∂m√©nyt.',
                        'Hozz√°adjuk a karik√°ra v√°gott z√∂lds√©geket.',
                        'S√≥zzuk, borsozzuk, √©s puh√°ra f≈ëzz√ºk.'
                    ]
                }
            ],
            't√∂lt√∂tt paprika': [
                {
                    title: 'T√∂lt√∂tt paprika',
                    source: 'nosalty.hu',
                    url: 'https://www.nosalty.hu/recept/toltott-paprika',
                    ingredients: [
                        '8 db z√∂ldpaprika',
                        '50 dkg dar√°lt sert√©sh√∫s',
                        '15 dkg rizs',
                        '1 fej v√∂r√∂shagyma',
                        '2 gerezd fokhagyma',
                        '1 db toj√°s',
                        's√≥, bors, petrezselyem',
                        '2 db paradicsom',
                        '1 db zellerlev√©l'
                    ],
                    instructions: [
                        'A paprik√°k magh√°z√°t kiv√°gjuk.',
                        'A dar√°lt h√∫st a f≈ëtt rizzsel, hagym√°val, f≈±szerekkel √∂sszedolgozzuk.',
                        'A paprik√°kat megt√∂ltj√ºk a massz√°val.',
                        'Egym√°s mell√© √ºltetj√ºk egy l√°basba.',
                        'Fel√∂ntj√ºk v√≠zzel, paradicsommal, √©s puh√°ra f≈ëzz√ºk.'
                    ]
                }
            ],
            'r√°ntott h√∫s': [
                {
                    title: 'R√°ntott csirkecomb',
                    source: 'mindmegette.hu',
                    url: 'https://www.mindmegette.hu/rantott-csirkecomb.recept/',
                    ingredients: [
                        '4 db csirkecomb',
                        '15 dkg liszt',
                        '2 db toj√°s',
                        '10 dkg zsemlemorzsa',
                        's√≥ √≠zl√©s szerint',
                        'ol√≠vaolaj a s√ºt√©shez'
                    ],
                    instructions: [
                        'A csirkecombokat megmossuk, megs√≥zzuk.',
                        'Lisztbe, toj√°sba, majd zsemlemorzs√°ba forgatjuk.',
                        'Forr√≥ olajban mindk√©t oldal√°t aranybarn√°ra s√ºtj√ºk.',
                        'Pap√≠rt√∂r√∂lk√∂z≈ën lecs√∂p√∂gtetj√ºk.',
                        'Friss sal√°t√°val t√°laljuk.'
                    ]
                }
            ],
            't√©szta': [
                {
                    title: 'Spagetti carbonara',
                    source: 'nosalty.hu',
                    url: 'https://www.nosalty.hu/recept/spagetti-carbonara',
                    ingredients: [
                        '40 dkg spagetti',
                        '15 dkg pancetta vagy szalonna',
                        '2 db toj√°s',
                        '10 dkg reszelt parmez√°n',
                        '2 gerezd fokhagyma',
                        's√≥, bors √≠zl√©s szerint',
                        'ol√≠vaolaj'
                    ],
                    instructions: [
                        'A spagetti forr√≥ s√≥s v√≠zben kif≈ëzz√ºk.',
                        'A pancett√°t ropog√≥sra s√ºtj√ºk.',
                        'A toj√°sokat a reszelt sajttal elkeverj√ºk.',
                        'A forr√≥ t√©szt√°t a toj√°sos kever√©kkel √∂sszer√°zogatjuk.',
                        'A pancett√°t √©s fokhagym√°t hozz√°adjuk.'
                    ]
                }
            ]
        };
    }

    async fetchWithRetry(url, retries = 3) {
        for (let attempt = 0; attempt < retries; attempt++) {
            for (const proxy of this.proxies) {
                try {
                    const proxyUrl = proxy + encodeURIComponent(url);
                    console.log(`Trying: ${proxyUrl.substring(0, 100)}...`);
                    
                    const response = await fetch(proxyUrl, {
                        headers: {
                            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
                            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'
                        }
                    });
                    
                    if (response.ok) {
                        const text = await response.text();
                        if (text && text.length > 500) {
                            console.log('‚úÖ Success with proxy');
                            return text;
                        }
                    }
                } catch (error) {
                    console.warn(`‚ùå Proxy failed:`, error.message);
                    continue;
                }
            }
            
            // Wait before retry
            if (attempt < retries - 1) {
                console.log(`üîÑ Retry ${attempt + 1} in ${attempt + 1} seconds...`);
                await new Promise(resolve => setTimeout(resolve, 1000 * (attempt + 1)));
            }
        }
        throw new Error('All proxies failed');
    }

    async searchRecipes(query) {
        console.log('üîç Searching for:', query);
        
        // First check fallback data
        const lowerQuery = query.toLowerCase();
        if (this.fallbackData[lowerQuery]) {
            console.log('üìö Using fallback data for:', query);
            return this.fallbackData[lowerQuery];
        }
        
        const results = [];
        
        // Try real scraping with CORRECT URLs
        try {
            console.log('üåê Trying real scraping...');
            const realResults = await this.tryRealScraping(query);
            if (realResults.length > 0) {
                return realResults;
            }
        } catch (error) {
            console.log('‚ö†Ô∏è Real scraping failed, using enhanced fallback:', error.message);
        }
        
        // Enhanced fallback
        return this.createEnhancedFallback(query);
    }

    async tryRealScraping(query) {
        const results = [];
        
        // Try Mindmegette with CORRECT URL
        try {
            const mindmegetteResults = await this.scrapeMindmegette(query);
            results.push(...mindmegetteResults);
            console.log(`‚úÖ Mindmegette: ${mindmegetteResults.length} results`);
        } catch (error) {
            console.error('‚ùå Mindmegette scrape failed:', error.message);
        }
        
        // Try Nosalty with CORRECT URL
        try {
            const nosaltyResults = await this.scrapeNosalty(query);
            results.push(...nosaltyResults);
            console.log(`‚úÖ Nosalty: ${nosaltyResults.length} results`);
        } catch (error) {
            console.error('‚ùå Nosalty scrape failed:', error.message);
        }
        
        return results.filter(recipe => recipe && recipe.ingredients && recipe.ingredients.length > 0);
    }

    async scrapeMindmegette(query) {
        // CORRECT Mindmegette search URL
        const searchUrl = `https://www.mindmegette.hu/kereses?global_filter=${encodeURIComponent(query)}&content_types%5B%5D=recipe`;
        console.log('üîó Mindmegette URL:', searchUrl);
        
        const html = await this.fetchWithRetry(searchUrl);
        
        const parser = new DOMParser();
        const doc = parser.parseFromString(html, 'text/html');
        
        const recipes = [];
        
        // Multiple selector strategies for Mindmegette NEW layout
        const selectors = [
            '.recipe-list-item a',
            '.recipe-card a',
            '.search-result-item a',
            'a.recipe-link',
            'a[href*="/recept/"]',
            '.item-title a',
            'h2 a',
            'h3 a'
        ];
        
        let links = [];
        for (const selector of selectors) {
            links = doc.querySelectorAll(selector);
            if (links.length > 0) {
                console.log(`‚úÖ Found ${links.length} links with selector: ${selector}`);
                break;
            }
        }
        
        console.log(`üìä Total links found on Mindmegette: ${links.length}`);
        
        for (const link of Array.from(links).slice(0, 3)) {
            try {
                const href = link.getAttribute('href');
                if (!href) continue;
                
                let fullUrl = href;
                if (!href.startsWith('http')) {
                    fullUrl = `https://www.mindmegette.hu${href.startsWith('/') ? href : '/' + href}`;
                }
                
                // Get title from multiple possible locations
                let title = link.textContent?.trim() || 
                           link.querySelector('h2, h3, .title, .recipe-title')?.textContent?.trim() || 
                           `${query} recept`;
                
                // Clean up title
                title = title.replace(/\s+/g, ' ').substring(0, 100);
                
                if (title && title.length > 5 && !title.includes('¬©')) {
                    console.log('üçΩÔ∏è Processing Mindmegette recipe:', title);
                    const details = await this.getMindmegetteDetails(fullUrl);
                    
                    if (details) {
                        recipes.push({
                            title: title,
                            url: fullUrl,
                            source: 'mindmegette.hu',
                            ...details
                        });
                        console.log('‚úÖ Added recipe:', title);
                    } else {
                        // Add recipe even without details
                        recipes.push({
                            title: title,
                            url: fullUrl,
                            source: 'mindmegette.hu',
                            ingredients: ['Hozz√°val√≥k bet√∂lt√©se sikertelen'],
                            instructions: ['L√°togasd meg az oldalt a teljes recept√©rt!']
                        });
                        console.log('‚ö†Ô∏è Added recipe without details:', title);
                    }
                }
            } catch (error) {
                console.warn('‚ùå Error processing Mindmegette link:', error);
            }
        }
        
        return recipes;
    }

    async scrapeNosalty(query) {
        // CORRECT Nosalty search URL
        const searchUrl = `https://www.nosalty.hu/kereses/recept/${encodeURIComponent(query)}`;
        console.log('üîó Nosalty URL:', searchUrl);
        
        const html = await this.fetchWithRetry(searchUrl);
        
        const parser = new DOMParser();
        const doc = parser.parseFromString(html, 'text/html');
        
        const recipes = [];
        
        // Multiple selector strategies for Nosalty
        const selectors = [
            '.recipe-card a',
            '.search-result a',
            'a.recipe-link',
            'a[href*="/recept/"]',
            '.item-title a',
            'h2 a',
            'h3 a'
        ];
        
        let links = [];
        for (const selector of selectors) {
            links = doc.querySelectorAll(selector);
            if (links.length > 0) {
                console.log(`‚úÖ Found ${links.length} links with selector: ${selector}`);
                break;
            }
        }
        
        console.log(`üìä Total links found on Nosalty: ${links.length}`);
        
        for (const link of Array.from(links).slice(0, 3)) {
            try {
                const href = link.getAttribute('href');
                if (!href) continue;
                
                let fullUrl = href;
                if (!href.startsWith('http')) {
                    fullUrl = `https://www.nosalty.hu${href.startsWith('/') ? href : '/' + href}`;
                }
                
                // Get title from multiple possible locations
                let title = link.textContent?.trim() || 
                           link.querySelector('h2, h3, .title, .recipe-title')?.textContent?.trim() || 
                           `${query} recept`;
                
                // Clean up title
                title = title.replace(/\s+/g, ' ').substring(0, 100);
                
                if (title && title.length > 5 && !title.includes('¬©')) {
                    console.log('üçΩÔ∏è Processing Nosalty recipe:', title);
                    const details = await this.getNosaltyDetails(fullUrl);
                    
                    if (details) {
                        recipes.push({
                            title: title,
                            url: fullUrl,
                            source: 'nosalty.hu',
                            ...details
                        });
                        console.log('‚úÖ Added recipe:', title);
                    } else {
                        recipes.push({
                            title: title,
                            url: fullUrl,
                            source: 'nosalty.hu',
                            ingredients: ['Hozz√°val√≥k bet√∂lt√©se sikertelen'],
                            instructions: ['L√°togasd meg az oldalt a teljes recept√©rt!']
                        });
                        console.log('‚ö†Ô∏è Added recipe without details:', title);
                    }
                }
            } catch (error) {
                console.warn('‚ùå Error processing Nosalty link:', error);
            }
        }
        
        return recipes;
    }

    async getMindmegetteDetails(url) {
        try {
            console.log('üîç Fetching Mindmegette details:', url);
            const html = await this.fetchWithRetry(url);
            const parser = new DOMParser();
            const doc = parser.parseFromString(html, 'text/html');
            
            // Multiple strategies for ingredients
            let ingredients = [];
            const ingredientSelectors = [
                '.hozzavalok-list li',
                '.ingredients li',
                '.ingredient-item',
                '[class*="hozzaval"] li',
                '.recipe-ingredients li'
            ];
            
            for (const selector of ingredientSelectors) {
                const elements = doc.querySelectorAll(selector);
                if (elements.length > 0) {
                    ingredients = Array.from(elements)
                        .map(el => el.textContent?.trim().replace(/\s+/g, ' ') || '')
                        .filter(text => text.length > 2 && !text.includes('¬©'));
                    if (ingredients.length > 0) {
                        console.log(`‚úÖ Found ${ingredients.length} ingredients with: ${selector}`);
                        break;
                    }
                }
            }
            
            // Multiple strategies for instructions
            let instructions = [];
            const instructionSelectors = [
                '.preparation-steps li',
                '.instructions li',
                '.instruction-step',
                '[class*="elkeszit"] li',
                '.recipe-steps li'
            ];
            
            for (const selector of instructionSelectors) {
                const elements = doc.querySelectorAll(selector);
                if (elements.length > 0) {
                    instructions = Array.from(elements)
                        .map(el => el.textContent?.trim().replace(/\s+/g, ' ') || '')
                        .filter(text => text.length > 5 && !text.includes('¬©'));
                    if (instructions.length > 0) {
                        console.log(`‚úÖ Found ${instructions.length} instructions with: ${selector}`);
                        break;
                    }
                }
            }
            
            return {
                ingredients: ingredients.length > 0 ? ingredients.slice(0, 12) : ['Hozz√°val√≥k nem el√©rhet≈ëk'],
                instructions: instructions.length > 0 ? instructions.slice(0, 8) : ['Elk√©sz√≠t√©s nem el√©rhet≈ë']
            };
            
        } catch (error) {
            console.error('‚ùå Error getting Mindmegette details:', error);
            return null;
        }
    }

    async getNosaltyDetails(url) {
        try {
            console.log('üîç Fetching Nosalty details:', url);
            const html = await this.fetchWithRetry(url);
            const parser = new DOMParser();
            const doc = parser.parseFromString(html, 'text/html');
            
            // Ingredients for Nosalty
            let ingredients = [];
            const ingredientSelectors = [
                '.ingredient-list li',
                '.hozzavalok li',
                '.hozzavalo-item',
                '[class*="ingredient"] li',
                '.recipe-ingredients li'
            ];
            
            for (const selector of ingredientSelectors) {
                const elements = doc.querySelectorAll(selector);
                if (elements.length > 0) {
                    ingredients = Array.from(elements)
                        .map(el => el.textContent?.trim().replace(/\s+/g, ' ') || '')
                        .filter(text => text.length > 2);
                    if (ingredients.length > 0) {
                        console.log(`‚úÖ Found ${ingredients.length} ingredients with: ${selector}`);
                        break;
                    }
                }
            }
            
            // Instructions for Nosalty
            let instructions = [];
            const instructionSelectors = [
                '.instruction-list li',
                '.steps li',
                '.step-item',
                '[class*="instruction"] li',
                '.recipe-steps li'
            ];
            
            for (const selector of instructionSelectors) {
                const elements = doc.querySelectorAll(selector);
                if (elements.length > 0) {
                    instructions = Array.from(elements)
                        .map(el => el.textContent?.trim().replace(/\s+/g, ' ') || '')
                        .filter(text => text.length > 5);
                    if (instructions.length > 0) {
                        console.log(`‚úÖ Found ${instructions.length} instructions with: ${selector}`);
                        break;
                    }
                }
            }
            
            return {
                ingredients: ingredients.length > 0 ? ingredients.slice(0, 12) : ['Hozz√°val√≥k nem el√©rhet≈ëk'],
                instructions: instructions.length > 0 ? instructions.slice(0, 8) : ['Elk√©sz√≠t√©s nem el√©rhet≈ë']
            };
            
        } catch (error) {
            console.error('‚ùå Error getting Nosalty details:', error);
            return null;
        }
    }

    createEnhancedFallback(query) {
        console.log('üìù Creating enhanced fallback for:', query);
        
        const commonIngredients = {
            'p√∂rk√∂lt': ['marha- vagy sert√©sh√∫s', 'v√∂r√∂shagyma', 'pirospaprika', 'olaj', 's√≥', 'bors', 'fokhagyma'],
            'palacsinta': ['liszt', 'toj√°s', 'tej', 'sz√≥dav√≠z', 's√≥', 'olaj', 'van√≠li√°s cukor'],
            'guly√°s': ['marhah√∫s', 'burgonya', 's√°rgar√©pa', 'hagyma', 'pirospaprika', 'k√∂m√©ny', 'zeller'],
            't√∂lt√∂tt paprika': ['z√∂ldpaprika', 'dar√°lt h√∫s', 'rizs', 'hagyma', 'paradicsom', 'f≈±szerek', 'toj√°s'],
            'r√°ntott h√∫s': ['csirkecomb vagy sert√©sszelet', 'liszt', 'toj√°s', 'zsemlemorzsa', 's√≥', 'olaj'],
            't√©szta': ['t√©szta', 'ol√≠vaolaj', 's√≥', 'fokhagyma', 'reszelt sajt', 'friss f≈±szerek']
        };
        
        const baseIngredients = commonIngredients[query.toLowerCase()] || [
            'alapanyagok', 's√≥', 'bors', 'olaj', 'f≈±szerek', 'friss z√∂lds√©gek'
        ];
        
        return [
            {
                title: `${query} - alaprecept`,
                source: 'helyi adatb√°zis',
                url: '#',
                ingredients: baseIngredients,
                instructions: [
                    'El≈ëk√©sz√≠tsd az alapanyagokat.',
                    'K√∂vesd a hagyom√°nyos elk√©sz√≠t√©si m√≥dot.',
                    '√çzl√©s szerint f≈±szerezd.',
                    'Szerv√≠rozd frissen, melegen.',
                    'J√≥ √©tv√°gyat!'
                ]
            }
        ];
    }

    async generateRandomMeal() {
        const mealTypes = {
            'Leves': ['guly√°sleves', 'h√∫sleves', 'z√∂lds√©gleves', 'babguly√°s', 'gombaleves'],
            'F≈ë√©tel': ['p√∂rk√∂lt', 'r√°ntott h√∫s', 't√©szta', 't√∂lt√∂tt paprika', 's√ºlt csirke', 'lasagne']
        };
        
        const randomSoup = mealTypes['Leves'][Math.floor(Math.random() * mealTypes['Leves'].length)];
        const randomMain = mealTypes['F≈ë√©tel'][Math.floor(Math.random() * mealTypes['F≈ë√©tel'].length)];
        
        console.log(`üé≤ Generating random meal: ${randomSoup} + ${randomMain}`);
        
        const [soupResults, mainResults] = await Promise.all([
            this.searchRecipes(randomSoup),
            this.searchRecipes(randomMain)
        ]);
        
        return {
            'Leves': soupResults[0] || this.createEnhancedFallback(randomSoup)[0],
            'F≈ë√©tel': mainResults[0] || this.createEnhancedFallback(randomMain)[0]
        };
    }
}

// Global scraper instance
const scraper = new CorrectScraper();

// UI Functions (same as before, but with better logging)
function setLoading(loading) {
    const loadingEl = document.getElementById('loading');
    const searchBtn = document.getElementById('searchBtn');
    
    loadingEl.style.display = loading ? 'block' : 'none';
    searchBtn.disabled = loading;
    
    if (loading) {
        document.getElementById('results').innerHTML = '';
        document.getElementById('randomMeal').style.display = 'none';
        hideMessage();
        console.log('üîÑ Loading started...');
    } else {
        console.log('‚úÖ Loading finished');
    }
}

function showMessage(text, type = 'info') {
    const messageEl = document.getElementById('message');
    messageEl.innerHTML = `<p>${text}</p>`;
    messageEl.className = `message-box ${type}`;
    messageEl.style.display = 'block';
    console.log(`üí¨ Message: ${text}`);
}

function hideMessage() {
    document.getElementById('message').style.display = 'none';
}

async function searchRecipes() {
    const input = document.getElementById('searchInput');
    const query = input.value.trim();
    
    if (!query) {
        showMessage('K√©rj√ºk, √≠rj be egy recept nevet!', 'error');
        return;
    }

    setLoading(true);
    
    try {
        const recipes = await scraper.searchRecipes(query);
        displayRecipes(recipes);
        
        if (recipes.length === 0) {
            showMessage('Nem tal√°lhat√≥k receptek. Pr√≥b√°lj m√°sik kulcssz√≥t!', 'info');
        } else {
            showMessage(`${recipes.length} recept tal√°lhat√≥ a(z) "${query}" kulcssz√≥ra`, 'info');
            setTimeout(hideMessage, 4000);
        }
    } catch (error) {
        console.error('‚ùå Search error:', error);
        showMessage(`Hiba t√∂rt√©nt: ${error.message}`, 'error');
    } finally {
        setLoading(false);
    }
}

async function generateRandomMeal() {
    setLoading(true);
    hideMessage();
    
    try {
        const meal = await scraper.generateRandomMeal();
        displayRandomMeal(meal);
        showMessage('üéâ V√©letlenszer≈± men√º gener√°lva!', 'info');
        setTimeout(hideMessage, 4000);
    } catch (error) {
        console.error('‚ùå Random meal error:', error);
        showMessage(`Hiba a men√º gener√°l√°sakor: ${error.message}`, 'error');
    } finally {
        setLoading(false);
    }
}

function displayRecipes(recipes) {
    const container = document.getElementById('results');
    
    if (!recipes || recipes.length === 0) {
        container.innerHTML = `
            <div class="no-results">
                <h3>üòî Nincs tal√°lat</h3>
                <p>Pr√≥b√°lj meg m√°sik kulcssz√≥t!</p>
            </div>
        `;
        return;
    }

    container.innerHTML = recipes.map(recipe => `
        <div class="recipe-card">
            <div class="recipe-header">
                <div class="recipe-title">${recipe.title}</div>
                <div class="recipe-source">${recipe.source}</div>
            </div>
            <div class="recipe-content">
                <div class="section">
                    <div class="section-title">üìù Hozz√°val√≥k</div>
                    <ul class="ingredients-list">
                        ${recipe.ingredients.map(ing => `
                            <li class="ingredient-item">${ing}</li>
                        `).join('')}
                    </ul>
                </div>
                <div class="section">
                    <div class="section-title">üë®‚Äçüç≥ Elk√©sz√≠t√©s</div>
                    <ol class="instructions-list">
                        ${recipe.instructions.map(inst => `
                            <li class="instruction-item">${inst}</li>
                        `).join('')}
                    </ol>
                </div>
            </div>
            <div class="recipe-footer">
                ${recipe.url !== '#' ? `
                    <a href="${recipe.url}" target="_blank" rel="noopener" class="recipe-link">
                        üìñ Teljes recept megtekint√©se
                    </a>
                ` : '<span>üìç Helyi adatb√°zis</span>'}
            </div>
        </div>
    `).join('');
    
    console.log(`üìä Displayed ${recipes.length} recipes`);
}

function displayRandomMeal(meal) {
    const container = document.getElementById('randomMeal');
    
    container.innerHTML = `
        <div class="meal-header">
            <h2>üéâ V√©letlenszer≈± 2 Fog√°sos Men√º</h2>
            <p>√âlvezd ezt a finom kombin√°ci√≥t!</p>
        </div>
        <div class="meal-combination">
            ${Object.entries(meal).map(([course, recipe]) => `
                <div class="course-section">
                    <h3 class="course-title">${course}</h3>
                    <div class="recipe-card">
                        <div class="recipe-header">
                            <div class="recipe-title">${recipe.title}</div>
                            <div class="recipe-source">${recipe.source}</div>
                        </div>
                        <div class="recipe-content">
                            <div class="section">
                                <div class="section-title">üìù Hozz√°val√≥k</div>
                                <ul class="ingredients-list">
                                    ${recipe.ingredients.slice(0, 6).map(ing => `
                                        <li class="ingredient-item">${ing}</li>
                                    `).join('')}
                                </ul>
                            </div>
                        </div>
                        ${recipe.url !== '#' ? `
                            <div class="recipe-footer">
                                <a href="${recipe.url}" target="_blank" rel="noopener" class="recipe-link">
                                    üìñ Teljes recept
                                </a>
                            </div>
                        ` : ''}
                    </div>
                </div>
            `).join('')}
        </div>
        <div style="text-align: center; margin-top: 2rem;">
            <button class="action-btn primary" onclick="generateRandomMeal()">
                üîÑ √öj Men√º Gener√°l√°sa
            </button>
        </div>
    `;
    
    container.style.display = 'block';
    console.log('üéä Random meal displayed');
}

function quickSearch(query) {
    document.getElementById('searchInput').value = query;
    searchRecipes();
}

function clearAll() {
    document.getElementById('searchInput').value = '';
    document.getElementById('results').innerHTML = '';
    document.getElementById('randomMeal').style.display = 'none';
    document.getElementById('message').style.display = 'none';
    console.log('üóëÔ∏è All cleared');
}

// Event listeners
document.getElementById('searchInput').addEventListener('keypress', function(e) {
    if (e.key === 'Enter') searchRecipes();
});

// Initialize
document.addEventListener('DOMContentLoaded', function() {
    console.log('üç≥ Csal√°di Recept Keres≈ë elindult!');
    document.getElementById('searchInput').focus();
    document.getElementById('loading').style.display = 'none';
    
    // Show welcome message
    showMessage('√údv√∂z√∂llek! Kezdj el keresni recepteket. Pr√≥b√°ld: palacsinta, p√∂rk√∂lt, guly√°s', 'info');
    setTimeout(hideMessage, 5000);
});
